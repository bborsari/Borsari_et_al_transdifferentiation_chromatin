#*******
# 1. generate folders to store results
# mkdir out
#*******

#*******
# 2. soft link to gtf file used to run grape-nf
# ln -s /nfs/no_backup/rg/projects/ERC/human/rnaseq.grape.pipeline.gencode.v24.2016-04-19/refs/gen24.long.gtf
#*******

#*******
# 3. generate bedfile with coordinates for gene body of all genes in gencode v24 (long genes used to run pipeline)
# awk '$3=="gene"' gen24.long.gtf | cut -d ";" -f1 | awk 'BEGIN{OFS="\t"}{print $1, $4, $5, $10, 0, $7, $10}' | sed 's/\"//g' | awk 'BEGIN{FS=OFS="\t"}{$2=($2-1); print $0}' > gencode.v24.all.genes.gene.body.bed
#*******

#*******
# 4. generate bedfile with coordinates for gene body of protein_coding genes in gencode v24
# awk '$3=="gene"' gen24.long.gtf > gen24.long.gene.annotation.gtf
# grep -F "protein_coding" gen24.long.gene.annotation.gtf | cut -d ";" -f1 | awk 'BEGIN{OFS="\t"}{print $1, $4, $5, $10, 0, $7, $10}' | sed 's/\"//g' | awk 'BEGIN{FS=OFS="\t"}$1!="chrM"{$2=($2-1); print $0}' > gencode.v24.protein.coding.gene.body.bed
# rm gen24.long.gene.annotation.gtf
#*******

#*******
# 5. generate bedfile with coordinates +-5Kb of the first TSS (all genes)
# awk 'BEGIN{FS=OFS="\t"}{if ($6=="+"){$3=($2+5000); $2=($2-5000)}else{$2=($3-5000);$3=($3+5000)}; if ($2<0){$2=0}; print $0}' gencode.v24.all.genes.gene.body.bed > gencode.v24.all.genes.5Kb.upstream.downstream.TSS.bed
#*******

#*******
# 6. generate bedfile with coordinates -5Kb of the first TSS and +5Kb of the last TTS (all genes)
# awk 'BEGIN{FS=OFS="\t"}{$2=($2-5000); $3=($3+5000); if ($2<0){$2=0}; print $0}' gencode.v24.all.genes.gene.body.bed > gencode.v24.all.genes.5Kb.upstream.downstream.gene.body.bed
#*******

#*******
# 7. load conda environment
conda activate ERC_human &&
#*******

#*******
# 8. retrieve genes whose (+- 5Kb promoter region) overlaps with other (+- 5Kb gene bodies)
# bedtools intersect -a gencode.v24.all.genes.5Kb.upstream.downstream.TSS.bed -b gencode.v24.all.genes.5Kb.upstream.downstream.gene.body.bed -wo | awk '$7!=$14' | cut -f7 | sort -u > gencode.v24.all.overlapping.genes.txt
#*******

#*******
# 9. generate bedfile for non-overlapping protein-coding genes with coordinates for gene body
# grep -Fv -f gencode.v24.all.overlapping.genes.txt gencode.v24.protein.coding.gene.body.bed > gencode.v24.protein.coding.non.overlapping.genes.gene.body.bed
#*******

#*******
# 10. generate bedfile for non-overlapping protein-coding genes with coordinates for +- 5Kb first TSS
# grep -Ff <(cut -f4 gencode.v24.protein.coding.non.overlapping.genes.gene.body.bed) gencode.v24.all.genes.5Kb.upstream.downstream.TSS.bed > gencode.v24.protein.coding.non.overlapping.genes.5Kb.upstream.downstream.TSS.bed
#*******

#*******
# 11. retrieve list of
# files with Zerone peak calls
# grep -F erone_merged /no_backup_isis/rg/projects/ERC/human/chipseq/2018-01-19.chip-nf/chipseq-pipeline.db | grep -vi EBP | sort -k3,3 -k1,1 | cut -f2,3 > Zerone.merged.files.txt
#*******

#*******
# 12. generate folder to store files
# of selected genes for each mark
# mkdir selected.genes
#*******

#*******
# 13. retrieve selected genes for each mark
# aka genes with peaks of the mark 
# in (+- 5Kb promoter region) in all 12 time-points
# for mark in H3K4me3 H3K4me2 H3K4me1 H3K36me3 H4K20me1 H3K9ac H3K9me3 H3K27me3 H3K27ac; do awk -v mark="$mark" '$2==mark{print $1}' Zerone.merged.files.txt | while read file; do bedtools intersect -a gencode.v24.protein.coding.non.overlapping.genes.5Kb.upstream.downstream.TSS.bed -b $file -u; done | sort | uniq -c | awk '$1==12{print $5}' > selected.genes/"$mark".selected.genes.txt; done
#*******

#*******
# 14. prepare folder to store
# paths to bw files for each mark and replicate
# mkdir bw.files
#*******

#*******
# 15. retrieve paths to bw files 
# for each mark and replicate
# for mark in H3K4me3 H3K4me2 H3K4me1 H3K36me3 H4K20me1 H3K9ac H3K9me3 H3K27me3 H3K27ac; do 
#	for rep in 1 2; do 
# 		grep -F "$mark""X""$rep" /no_backup_isis/rg/projects/ERC/human/chipseq/2018-01-19.chip-nf/chipseq-pipeline.db | grep pileup | sort -k1,1 | cut -f2 > bw.files/"$mark".R"$rep".pileup.bw.txt &&
#	done
# done
#******

#******
# 16. aggregation plots - tss (5 Kb up/down-stream)
# for mark in H3K9ac H3K27ac H3K4me1 H3K4me2 H3K36me3 H3K9me3 H4K20me1 H3K27me3 H3K4me3; do

	# 16.1. prepare tmp bed file
#	grep -Ff selected.genes/"$mark".selected.genes.txt gencode.v24.protein.coding.non.overlapping.genes.gene.body.bed > tmp.bed

	# 16.2. get aggregate tables
# 	for rep in R1 R2; do
#		/no_backup/rg/bborsari/projects/ERC/human/2018-01-19.chip-nf/Borsari_et_al/bin/bwtool.aggregate.ChIPseq.sh --bw bw.files/"$mark"."$rep".pileup.bw.txt --bedfile tmp.bed --type tss --outFile out/"$mark".aggregation.plot."$rep".tsv
# 	done
	
	# 16.3. rm tmp bed file
#	rm tmp.bed
# done
#******

#******
# 17. aggregation plots - gene body (5 Kb up/down-stream)
for mark in H3K36me3 H4K20me1; do

	# 17.1. prepare tmp bed file
	grep -Ff selected.genes/"$mark".selected.genes.txt gencode.v24.protein.coding.non.overlapping.genes.gene.body.bed > tmp.bed

	# 17.2. retrieve meta value
	pos=$(awk 'function ceil(x, y){y=int(x); return(x>y?y+1:y)}{n++}END{$0=n/2; print ceil($0)}' tmp.bed)
	myMeta=$(awk '{print $3-$2}' tmp.bed | sort -n | awk -v pos="$pos" 'NR==pos{print}')

	# 17.3. get aggregate tables
 	for rep in R1 R2; do
		/no_backup/rg/bborsari/projects/ERC/human/2018-01-19.chip-nf/Borsari_et_al/bin/bwtool.aggregate.ChIPseq.sh --bw bw.files/"$mark"."$rep".pileup.bw.txt --bedfile tmp.bed --type gene_body --meta "$myMeta" --outFile out/"$mark".aggregation.plot."$rep".gene.body.tsv
 	done
	
	# 17.4 rm tmp bed file
	rm tmp.bed
done
#******
